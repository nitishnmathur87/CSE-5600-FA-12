from rdf_ontology import *
import re

header = """
// AUTOGENERATED from SMART OWL Ontology.  Do not edit.
(function(context) {
  if (!context.smart_parser) {
    context.smart_parser = {};
  }

  var type_definitions = {};
  context.smart_parser.type_definitions = type_definitions;
"""

footer = """
})(window);
"""

new_type = string.Template("""
  type_definitions["$uri"] = { 
    name: "$name",
    uri: "$uri",
    is_statement: $is_statement,
    data_properties: [ $data_properties 
    ],
    object_properties: [ $object_properties 
    ]
  };
""")

data_property = string.Template("""
      {
        name: "$name", 
        uri: "$uri",
        allow_list: $allow_list
      }""")

object_property = string.Template("""
      {
        name: "$name", 
        uri: "$uri",
        allow_list: $allow_list,
        target: "$target"
      }""")


def make_dps(t):
    dps = []
    for dp in sorted(t.data_properties, key=lambda x: x.name):
        allow_list = dp.multiple_cardinality and "true" or "false"

        dps.append(data_property.substitute(
                uri=dp.uri.n3(),
                name=dp.name,
                allow_list=allow_list
                ))
    return ",".join(dps)


def make_ops(t):
    ops = []
    for op in sorted(t.object_properties, key=lambda x: x.name):
        allow_list = op.multiple_cardinality and "true" or "false"

        ops.append(object_property.substitute(
                uri=op.uri.n3(),
                name=op.name,
                allow_list=allow_list,
                target=op.to_class.uri.n3()
                ))
    return ",".join(ops)

print header
api_types = sorted(api_types, key=lambda x: x.name)

for t in api_types:
    data_properties = make_dps(t)
    object_properties = make_ops(t)
    print new_type.substitute(
        uri=t.uri.n3(),
        name=t.name,
        is_statement=t.is_statement and "true" or "false",
        data_properties=data_properties,
        object_properties=object_properties)
print footer
